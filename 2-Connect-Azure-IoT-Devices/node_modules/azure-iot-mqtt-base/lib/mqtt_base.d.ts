/// <reference types="node" />
import { EventEmitter } from 'events';
import { IClientPublishOptions, IClientSubscribeOptions } from 'mqtt';
import { SharedAccessSignature, X509 } from 'azure-iot-common';
export declare class MqttBase extends EventEmitter {
    private mqttprovider;
    private _config;
    private _sdkVersionString;
    private _mqttClient;
    private _fsm;
    constructor(sdkVersionString: string, mqttprovider?: any);
    connect(config: MqttBase.TransportConfig, done: (err?: Error, result?: any) => void): void;
    disconnect(done: (err?: Error, result?: any) => void): void;
    publish(topic: string, payload: any, options: IClientPublishOptions, done: (err?: Error, result?: any) => void): void;
    subscribe(topic: string, options: IClientSubscribeOptions, callback: (err?: Error, result?: any) => void): void;
    unsubscribe(topic: string, callback: (err?: Error, result?: any) => void): void;
    updateSharedAccessSignature(sharedAccessSignature: string, callback: (err?: Error) => void): void;
    private _connectClient(callback);
    private _disconnectClient(forceDisconnect, callback);
}
export declare namespace MqttBase {
    interface TransportConfig {
        host: string;
        sharedAccessSignature?: string | SharedAccessSignature;
        deviceId: string;
        x509?: X509;
        username?: string;
        clean?: boolean;
    }
}
