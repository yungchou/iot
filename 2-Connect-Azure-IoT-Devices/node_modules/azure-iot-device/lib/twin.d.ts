/// <reference types="node" />
import { EventEmitter } from 'events';
import { Client } from './client';
/**
 * A Device Twin is document describing the state of a device that is stored by an Azure IoT hub and is available even if the device is offline.
 * It is built around 3 sections:
 *   - Tags: key/value pairs only accessible from the service side
 *   - Desired Properties: updated by a service and received by the device
 *   - Reported Properties: updated by the device and received by the service.
 *
 * Note that although it is a possibility, desired and reported properties do not have to match
 * and that the logic to sync these two collections, if necessary, is left to the user of the SDK.
 *
 * For more information see {@link https://docs.microsoft.com/en-us/azure/iot-hub/iot-hub-devguide-device-twins|Understanding Device Twins}.
 *
 */
export declare class Twin extends EventEmitter {
    static timeout: number;
    static errorEvent: string;
    static subscribedEvent: string;
    static responseEvent: string;
    static postEvent: string;
    static desiredPath: string;
    /**
     * The desired and reported properties dictionnaries (respectively in `properties.desired` and `properties.reported`).
     */
    properties: any;
    private _rid;
    private _client;
    private _receiver;
    /**
     * The constructor should not be used directly and instead the SDK user should use the {@link Client#getTwin} method to obtain a valid `Twin` object.
     * @constructor
     * @private
     * @param client The device client to use in order to communicate with the Azure IoT hub.
     */
    constructor(client: Client);
    private _connectSubscribeAndGetProperties(done);
    private _subscribe(done);
    private _sendTwinRequest(method, resource, properties, body, done);
    private _updateReportedProperties(state, done);
    private _mergePatch(dest, patch);
    private _clearCachedProperties();
    private _getPropertiesFromService(done);
    private _fireChangeEvents(desiredProperties);
    private _onServicePost(body);
    private _handleNewListener(eventName);
    /**
     * @private
     * @method          module:azure-iot-device.Twin#fromDeviceClient
     * @description     Get a Twin object for the given client connection. This is meant to be called by the device client, not by the SDK user who should be using {@link Client#getTwin}.
     * @static
     *
     * @param  {Object}         client  The [client]{@link module:azure-iot-device.Client} object that this Twin object is associated with.
     * @param  {Function}       done  the callback to be invoked when this function completes.
     *
     * @throws {ReferenceError} One of the required parameters is falsy
     */
    static fromDeviceClient(client: Client, done: (err?: Error, result?: Twin) => void): void;
}
