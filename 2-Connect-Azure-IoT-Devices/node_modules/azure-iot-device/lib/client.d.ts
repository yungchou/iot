/// <reference types="node" />
import { Stream } from 'stream';
import { EventEmitter } from 'events';
import { results, Message, X509, AuthenticationProvider } from 'azure-iot-common';
import { SharedAccessSignature as CommonSharedAccessSignature } from 'azure-iot-common';
import { RetryPolicy } from 'azure-iot-common';
import { BlobUploadClient } from './blob_upload';
import { DeviceMethodRequest, DeviceMethodResponse } from './device_method';
import { Twin } from './twin';
/**
 * IoT Hub device client used to connect a device with an Azure IoT hub.
 *
 * Users of the SDK should call one of the factory methods,
 * {@link azure-iot-device.Client.fromConnectionString|fromConnectionString}
 * or {@link azure-iot-device.Client.fromSharedAccessSignature|fromSharedAccessSignature}
 * to create an IoT Hub device client.
 */
export declare class Client extends EventEmitter {
    /**
     * @private
     */
    static sasRenewalInterval: number;
    /**
     * @private
     */
    _transport: Client.Transport;
    /**
     * @private
     */
    _twin: Twin;
    /**
     * @private
     * Maximum timeout (in milliseconds) used to consider an operation failed.
     * The operation will be retried according to the retry policy set with {@link azure-iot-device.Client.setRetryPolicy} method (or {@link azure-iot-common.ExponentialBackoffWithJitter} by default) until this value is reached.)
     */
    private _maxOperationTimeout;
    private _methodCallbackMap;
    private _disconnectHandler;
    private blobUploadClient;
    private _c2dEnabled;
    private _methodsEnabled;
    private _retryPolicy;
    /**
     * @constructor
     * @param {Object}  transport         An object that implements the interface
     *                                    expected of a transport object, e.g.,
     *                                    {@link azure-iot-device-http.Http|Http}.
     * @param {string}  connStr           A connection string (optional: when not provided, updateSharedAccessSignature must be called to set the SharedAccessSignature token directly).
     * @param {Object}  blobUploadClient  An object that is capable of uploading a stream to a blob.
     */
    constructor(transport: Client.Transport, connStr?: string, blobUploadClient?: BlobUploadClient);
    /**
     * @method            module:azure-iot-device.Client#onDeviceMethod
     * @description       Registers the `callback` to be invoked when a
     *                    cloud-to-device method call is received by the client
     *                    for the given `methodName`.
     *
     * @param {String}   methodName   The name of the method for which the callback
     *                                is to be registered.
     * @param {Function} callback     The callback to be invoked when the C2D method
     *                                call is received.
     *
     * @throws {ReferenceError}       If the `methodName` or `callback` parameter
     *                                is falsy.
     * @throws {TypeError}            If the `methodName` parameter is not a string
     *                                or if the `callback` is not a function.
     */
    onDeviceMethod(methodName: string, callback: (request: DeviceMethodRequest, response: DeviceMethodResponse) => void): void;
    /**
     * @method            module:azure-iot-device.Client#updateSharedAccessSignature
     * @description       Updates the Shared Access Signature token used by the transport to authenticate with the IoT Hub service.
     *
     * @param {String}   sharedAccessSignature   The new SAS token to use.
     * @param {Function} done       The callback to be invoked when `updateSharedAccessSignature`
     *                              completes execution.
     *
     * @throws {ReferenceError}     If the sharedAccessSignature parameter is falsy.
     * @throws {ReferenceError}     If the client uses x509 authentication.
     */
    updateSharedAccessSignature(sharedAccessSignature: string, updateSasCallback?: (err?: Error, result?: results.SharedAccessSignatureUpdated) => void): void;
    /**
     * @method            module:azure-iot-device.Client#open
     * @description       Call the transport layer CONNECT function if the
     *                    transport layer implements it
     *
     * @param {Function} openCallback  The callback to be invoked when `open`
     *                                 completes execution.
     */
    open(openCallback: (err?: Error, result?: results.Connected) => void): void;
    /**
     * @method            module:azure-iot-device.Client#sendEvent
     * @description       The [sendEvent]{@link azure-iot-device.Client.sendEvent} method sends an event message
     *                    to the IoT Hub as the device indicated by the connection string passed
     *                    via the constructor.
     *
     * @param {azure-iot-common.Message}  message            The [message]{@link azure-iot-common.Message} to be sent.
     * @param {Function}                  sendEventCallback  The callback to be invoked when `sendEvent` completes execution.
     */
    sendEvent(message: Message, sendEventCallback?: (err?: Error, result?: results.MessageEnqueued) => void): void;
    /**
     * @method            module:azure-iot-device.Client#sendEventBatch
     * @description       The [sendEventBatch]{@link azure-iot-device.Client.sendEventBatch} method sends a list
     *                    of event messages to the IoT Hub as the device indicated by the connection
     *                    string passed via the constructor.
     *
     * @param {array<Message>} messages               Array of [Message]{@link azure-iot-common.Message}
     *                                                objects to be sent as a batch.
     * @param {Function}      sendEventBatchCallback  The callback to be invoked when
     *                                                `sendEventBatch` completes execution.
     */
    sendEventBatch(messages: Message[], sendEventBatchCallback?: (err?: Error, result?: results.MessageEnqueued) => void): void;
    /**
     * @method           module:azure-iot-device.Client#close
     * @description      The `close` method directs the transport to close the current connection to the IoT Hub instance
     *
     * @param {Function} closeCallback    The callback to be invoked when the connection has been closed.
     */
    close(closeCallback?: (err?: Error, result?: results.Disconnected) => void): void;
    /**
     * @deprecated      Use Client.setOptions instead.
     * @method          module:azure-iot-device.Client#setTransportOptions
     * @description     The `setTransportOptions` method configures transport-specific options for the client and its underlying transport object.
     *
     * @param {Object}      options     The options that shall be set (see transports documentation).
     * @param {Function}    done        The callback that shall be invoked with either an error or a result object.
     */
    setTransportOptions(options: any, done?: (err?: Error, result?: results.TransportConfigured) => void): void;
    /**
     * @method          module:azure-iot-device.Client#setOptions
     * @description     The `setOptions` method let the user configure the client.
     *
     * @param  {Object}    options  The options structure
     * @param  {Function}  done     The callback that shall be called when setOptions is finished.
     *
     * @throws {ReferenceError}     If the options structure is falsy
     */
    setOptions(options: any, done?: (err?: Error, result?: results.TransportConfigured) => void): void;
    /**
     * @method           module:azure-iot-device.Client#complete
     * @description      The `complete` method directs the transport to settle the message passed as argument as 'completed'.
     *
     * @param {Message}  message           The message to settle.
     * @param {Function} completeCallback  The callback to call when the message is completed.
     *
     * @throws {ReferenceError} If the message is falsy.
     */
    complete(message: Message, completeCallback: (err?: Error, result?: results.MessageCompleted) => void): void;
    /**
     * @method           module:azure-iot-device.Client#reject
     * @description      The `reject` method directs the transport to settle the message passed as argument as 'rejected'.
     *
     * @param {Message}  message         The message to settle.
     * @param {Function} rejectCallback  The callback to call when the message is rejected.
     *
     * @throws {ReferenceException} If the message is falsy.
     */
    reject(message: Message, rejectCallback: (err?: Error, result?: results.MessageRejected) => void): void;
    /**
     * @method           module:azure-iot-device.Client#abandon
     * @description      The `abandon` method directs the transport to settle the message passed as argument as 'abandoned'.
     *
     * @param {Message}  message          The message to settle.
     * @param {Function} abandonCallback  The callback to call when the message is abandoned.
     *
     * @throws {ReferenceException} If the message is falsy.
     */
    abandon(message: Message, abandonCallback: (err?: Error, result?: results.MessageAbandoned) => void): void;
    /**
     * @method           module:azure-iot-device.Client#uploadToBlob
     * @description      The `uploadToBlob` method uploads a stream to a blob.
     *
     * @param {String}   blobName         The name to use for the blob that will be created with the content of the stream.
     * @param {Stream}   stream           The data to that should be uploaded to the blob.
     * @param {Number}   streamLength     The size of the data to that should be uploaded to the blob.
     * @param {Function} done             The callback to call when the upload is complete.
     *
     * @throws {ReferenceException} If blobName or stream or streamLength is falsy.
     */
    uploadToBlob(blobName: string, stream: Stream, streamLength: number, done: (err?: Error) => void): void;
    /**
     * @method           module:azure-iot-device.Client#getTwin
     * @description      The `getTwin` method creates a Twin object and establishes a connection with the Twin service.
     *
     * @param {Function} done             The callback to call when the connection is established.
     *
     */
    getTwin(done: (err?: Error, twin?: Twin) => void, twin?: Twin): void;
    /**
     * Sets the retry policy used by the client on all operations. The default is {@link azure-iot-common.ExponentialBackoffWithJitter|ExponentialBackoffWithJitter}.
     * @param policy {RetryPolicy}  The retry policy that should be used for all future operations.
     */
    setRetryPolicy(policy: RetryPolicy): void;
    private _validateDeviceMethodInputs(methodName, callback);
    private _addMethodCallback(methodName, callback);
    private _enableC2D(callback);
    private _disableC2D(callback);
    private _enableMethods(callback);
    private _closeTransport(closeCallback);
    /**
     * @method            module:azure-iot-device.Client.fromConnectionString
     * @description       Creates an IoT Hub device client from the given
     *                    connection string using the given transport type.
     *
     * @param {String}    connStr       A connection string which encapsulates "device
     *                                  connect" permissions on an IoT hub.
     * @param {Function}  Transport     A transport constructor.
     *
     * @throws {ReferenceError}         If the connStr parameter is falsy.
     *
     * @returns {module:azure-iothub.Client}
     */
    static fromConnectionString(connStr: string, transportCtor: any): Client;
    /**
     * @method            module:azure-iot-device.Client.fromSharedAccessSignature
     * @description       Creates an IoT Hub device client from the given
     *                    shared access signature using the given transport type.
     *
     * @param {String}    sharedAccessSignature      A shared access signature which encapsulates "device
     *                                  connect" permissions on an IoT hub.
     * @param {Function}  Transport     A transport constructor.
     *
     * @throws {ReferenceError}         If the connStr parameter is falsy.
     *
     * @returns {module:azure-iothub.Client}
     */
    static fromSharedAccessSignature(sharedAccessSignature: string, transportCtor: any): Client;
    /**
     * @method                        module:azure-iot-device.Client.fromAuthenticationMethod
     * @description                   Creates an IoT Hub device client from the given authentication method and using the given transport type.
     * @param authenticationProvider  Object used to obtain the authentication parameters for the IoT hub.
     * @param transportCtor           Transport protocol used to connect to IoT hub.
     */
    static fromAuthenticationProvider(authenticationProvider: AuthenticationProvider, transportCtor: any): Client;
}
export declare namespace Client {
    /**
     * @private
     * Configuration parameters used to authenticate and connect a Device Client with an Azure IoT hub.
     */
    interface Config {
        /**
         * Device unique identifier (as it exists in the device registry).
         */
        deviceId: string;
        /**
         * Hostname of the Azure IoT hub. (<IoT hub name>.azure-devices.net).
         */
        host: string;
        /**
         * @deprecated This is not used anywhere anymore.
         * Name of the Azure IoT hub. (The first section of the Azure IoT hub hostname)
         */
        hubName?: string;
        /**
         * If using symmetric key authentication, this is used to generate the shared access signature tokens used to authenticate the connection.
         */
        symmetricKey?: string;
        /**
         * The shared access signature token used to authenticate the connection with the Azure IoT hub.
         */
        sharedAccessSignature?: string | CommonSharedAccessSignature;
        /**
         * Structure containing the certificate and associated key used to authenticate the connection if using x509 certificates as the authentication method.
         */
        x509?: X509;
    }
    interface Transport extends EventEmitter {
        on(type: 'error', func: (err: Error) => void): this;
        on(type: 'disconnect', func: (err?: Error) => void): this;
        connect(done: (err?: Error, result?: results.Connected) => void): void;
        disconnect(done: (err?: Error, result?: results.Disconnected) => void): void;
        setOptions?(options: any, done: (err?: Error, result?: results.TransportConfigured) => void): void;
        updateSharedAccessSignature(sharedAccessSignature: string, done: (err?: Error, result?: results.SharedAccessSignatureUpdated) => void): void;
        sendEvent(message: Message, done: (err?: Error, result?: results.MessageEnqueued) => void): void;
        sendEventBatch(messages: Message[], done: (err?: Error, result?: results.MessageEnqueued) => void): void;
        on(type: 'message', func: (msg: Message) => void): this;
        complete(message: Message, done: (err?: Error, result?: results.MessageCompleted) => void): void;
        reject(message: Message, done: (err?: Error, results?: results.MessageRejected) => void): void;
        abandon(message: Message, done: (err?: Error, results?: results.MessageAbandoned) => void): void;
        enableC2D(callback: (err?: Error) => void): void;
        disableC2D(callback: (err?: Error) => void): void;
        getTwinReceiver(done: (err?: Error, receiver?: any) => void): void;
        sendTwinRequest(method: string, resource: string, properties: {
            [key: string]: any;
        }, body: any, done?: (err?: Error, result?: any) => void): void;
        enableTwin(callback: (err?: Error) => void): void;
        disableTwin(callback: (err?: Error) => void): void;
        sendMethodResponse(response: DeviceMethodResponse, done?: (err?: Error, result?: any) => void): void;
        onDeviceMethod(methodName: string, methodCallback: (request: MethodMessage, response: DeviceMethodResponse) => void): void;
        enableMethods(callback: (err?: Error) => void): void;
        disableMethods(callback: (err?: Error) => void): void;
    }
    interface BlobUpload {
        uploadToBlob(blobName: string, stream: Stream, steamLength: number, done: (err?: Error) => void): void;
        updateSharedAccessSignature(sharedAccessSignature: string): void;
    }
    /**
     * @private
     * @deprecated
     */
    interface MethodMessage {
        methods: {
            methodName: string;
        };
        requestId: string;
        properties: {
            [key: string]: string;
        };
        body: Buffer;
    }
    type TransportCtor = new (config: Config) => Transport;
}
